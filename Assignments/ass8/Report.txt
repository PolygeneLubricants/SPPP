7.1.5
We chose the implementation 2. 
We iterate over the stripes, locking each stripe as we iterate over it's buckets, and the nodes in each bucket.

7.1.7
# OS:   Mac OS X; 10.9.5; x86_64
# JVM:  Oracle Corporation; 1.8.0_20
# CPU:  null
# Date: 2014-10-27T16:11:31+0100
SynchronizedMap       16        1660134.0 us   41768.00          2
StripedMap            16         553854.0 us   78551.35          2

StripedMap is the fastest, as expected. The synchromised map only allows one thread acces at a time, while the StripedMap allows n threads access, where n is the number of stripes.

7.1.8
Everything apart from forEach and size, only accesses a single bucket. This only triggers a single lock, dispite the amount of stripes. 
forEach and size needs to lock every stripe as it iterates over all buckets. Thus, increasing the amount of stripes will increase the overhead introduced by synchronization.
The expected usage pattern for StripedMap<K, V> will not access all buckets simultanousely. Thus, the single-bucket locking operations will not get lock conflicts often.

7.1.9
By increasing the number of stripes, each stripe will hold fewer buckets. The number of threads does not necessarily limit the number of stripes, as each thread can still try and access buckets next to each other, thus coliding with the same stripe over multiple threads. The optimal number of stripes is whichever creates the fewest lock-collisions, while still maintaining a minimal overhead.

7.1.10
The number of buckets must be able to be doubled. If h % lockCount is not invariant under doubling the number of buckets, then a lock-stripe may think it has locked a bucket, but after doubling the buckets, another stripe is responsible for that bucket.


7.2.2
because the size has not changed... and there is no visibility concerns

7.2.5
SynchronizedMap       16         491925.3 us   16689.37          2
99992.0
StripedMap            16         196761.5 us   37335.62          2
99992.0
StripedWriteMap       16         142097.6 us   31387.11          2
99992.0
WrapConcHashMap       16         120693.8 us    2746.71          4
99992.0

StripedWriteMap is faster than StripedMap, due to the reduced overhead from locking.

8.3.1
SwingWorker cannot guarantee that process is executed before publish runs. This can create concurrency issues when trying to calculate the ProgressBar's value.
We have chosen solution 1, creating a SwingWorker for each url. This is done by using a composite wrapper (DownloadWorkerContainer).
It takes a TextArea, a list of urls and a progressbar, and creates an appropriate number of DownloadWorkers, and adds ChangeListeners.
It also wraps the functionality of the DownloadWorker, such that execute() and cancel() can be called. This triggers an iteration over each DownloadWorker, which calls the appropriate method (execute and cancel).

8.3.2
The DownloadWorkerContainer has a cancel method, which iterates over each DownloadWorker, and calls cancel() on each worker.

8.3.3
The ProgressBar's maximum has been changed to the number of workers (23). doInBackground sets it's progress to 100% (for the individual worker) when it has downloaded the page.
The ProgressBar is then updated through an atomic integer, to increment this. When all workers are done, the total is 23.